{
    "Resources": {
        "cfVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.0.0.0/16",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            }
        },
        "cfSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "cfVPC"
                },
                "CidrBlock": "10.0.1.0/24",
                "MapPublicIpOnLaunch": true,
                "AvailabilityZone": "ap-south-1a"
            }
        },
        "ec2WithUIForOllama": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "ImageId": "ami-03f4878755434977f",
                "InstanceType": "t2.large",
                "KeyName": "kp1",
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": 15,
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "EC2 with ollama running llama3.1:8b"
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "apt update -y\n",
                                "apt-get install -y apache2\n",
                                "service apache2 start\n",
                                "cat <<EOF > /var/www/html/index.html\n",
                                "<!DOCTYPE html>\n",
                                "<html>\n",
                                "<head>\n",
                                "<title>Please wait while startup script completes</title>\n",
                                "</head>\n",
                                "<body>\n",
                                "<h1>Please wait while startup script completes..</h1>\n",
                                "<script>\n",
                                "    function getRandomInt() {\n",
                                "        return Math.floor(Math.random() * 256);\n",
                                "    }\n",
                                "    var color = 'rgb(' + getRandomInt() + ',' + getRandomInt() + ',' + getRandomInt() + ')';\n",
                                "    document.querySelector(\"h1\").style.color = color;\n",
                                "    setInterval(function() {\n",
                                "        location.reload();\n",
                                "    }, 1000);\n",
                                "</script>\n",
                                "</body>\n",
                                "</html>\n",
                                "EOF\n",
                                "apt install git -y\n",
                                "gitv=$(git version)\n",
                                "model=llama3.1:8b\n",
                                "curl -fsSL https://ollama.com/install.sh | sh\n",
                                "export HOME=/home/ec2-user\n",
                                "ollama serve&\n",
                                "sleep 5\n",
                                "ollama pull $model\n",
                                "curl_out1=$(curl http://localhost:11434)\n",
                                "curl_out2=$(curl http://localhost:11434/api/generate -d '{\"model\": \"llama3.1:8b\",\"prompt\": \"Write a poem on goat in 10 words\"}')\n",
                                "public_ip=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)\n",
                                "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash\n",
                                "export NVM_DIR=\"$HOME/.nvm\"\n",
                                "[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"\n",
                                "[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"\n",
                                "nvm install 20\n",
                                "nodev=$(node -v)\n",
                                "git clone https://github.com/devashish234073/ui-for-ai\n",
                                "cd ui-for-ai\n",
                                "npm install\n",
                                "node server.js $model&\n",
                                "cd ..\n",
                                "cat <<EOF > /var/www/html/index.html\n",
                                "<!DOCTYPE html>\n",
                                "<html>\n",
                                "<head>\n",
                                "<title>UI setup done</title>\n",
                                "</head>\n",
                                "<body>\n",
                                "<h1>UI setup done</h1>\n",
                                "<p>Git Installed: $gitv<p>\n",
                                "<p>Node Installed: $nodev<p>\n",
                                "<p>Curl for Ollama: $curl_out1<p>\n",
                                "<a href=\"http://${public_ip}:9999/index.html\">Click Here To Launch AI Chat</a>\n",
                                "<p>Query Resp from $model: $curl_out2<p>\n",
                                "</body>\n",
                                "</html>\n",
                                "EOF\n",
                                "systemctl enable apache2\n"
                            ]
                        ]
                    }
                },
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0",
                        "AssociatePublicIpAddress": "true",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "cfSubnet1"
                        },
                        "GroupSet": [
                            {
                                "Ref": "MySecurityGroup"
                            }
                        ]
                    }
                ]
            }
        },
        "MySecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "cfVPC"
                },
                "GroupDescription": "Allow SSH and HTTP traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9999,
                        "ToPort": 9999,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 11434,
                        "ToPort": 11434,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "-1",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "MyInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {}
        },
        "GatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "cfVPC"
                },
                "InternetGatewayId": {
                    "Ref": "MyInternetGateway"
                }
            }
        },
        "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "cfVPC"
                }
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayAttachment",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "MyInternetGateway"
                }
            }
        },
        "PublicSubnet1RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "cfSubnet1"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            }
        },
        "MyNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "cfVPC"
                }
            }
        },
        "MyNetworkAclEntryIngress1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "MyNetworkAcl"
                },
                "RuleNumber": 100,
                "Protocol": "6",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0",
                "Egress": false,
                "PortRange": {
                    "From": 22,
                    "To": 22
                }
            }
        },
        "MyNetworkAclEntryEgress1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "MyNetworkAcl"
                },
                "RuleNumber": 100,
                "Protocol": "6",
                "RuleAction": "allow",
                "CidrBlock": "0.0.0.0/0",
                "Egress": true,
                "PortRange": {
                    "From": 22,
                    "To": 22
                }
            }
        }
    }
}